component im_uvw
% im in three phase representation


    nodes
        S = foundation.mechanical.rotational.rotational; % S:right
        uu_p = foundation.electrical.electrical; % uu_p:right
        uv_p = foundation.electrical.electrical; % uv_p:right
        uw_p = foundation.electrical.electrical; % uw_p:right
        uu_n = foundation.electrical.electrical; % uu_n:right
        uv_n = foundation.electrical.electrical; % uv_n:right
        uw_n = foundation.electrical.electrical; % uw_n:right
    end

    outputs
        isu_out = { 0, 'A' };               % isu:left
        isv_out = { 0, 'A' };               % isv:left
        isw_out = { 0, 'A' };               % isw:left
        psi_s_u_out = { 0, 'V*s' };         % psi_s_u:left
        psi_s_v_out = { 0, 'V*s' };         % psi_s_v:left
        psi_s_w_out = { 0, 'V*s' };         % psi_s_w:left
        psi_r_u_out = { 0, 'V*s' };         % psi_r_u:left
        psi_r_v_out = { 0, 'V*s' };         % psi_r_v:left
        psi_r_w_out = { 0, 'V*s' };         % psi_r_w:left
        tau_e_out = { 0, 'N*m' };           % motor_torque:left
        theta_r_out = { 0, 'rad' };         % theta_m:left
    end

    parameters
        Lm = {0.00532612, 'H'};          % Lm
        Rs = {0.00221333,'Ohm'};         % Rs
        Lr = {0.00544522, 'H'};          % Lr
        Ls = {0.00544522, 'H'};          % Ls
        Rr = {0.00473653,'Ohm'};         % Rr
        Jm = { 1, 'kg*m^2' };            % J
        bm = { 0.05, 'N*m/(rad/s)' };    % bm
        cp = { 3, '1' };                 % pole pairs
    end

    variables(Access = private)
        omega_r = { 0, 'rad/s' };               % omega_r
        isu = { 0, 'A' };                       % isu
        isv = { 0, 'A' };                       % isv
        isw = { 0, 'A' };                       % isw
        iru = { 0, 'A' };                       % iru
        irv = { 0, 'A' };                       % irv
        irw = { 0, 'A' };                       % irw
        uu = { 0, 'V' };                        % uu
        uv = { 0, 'V' };                        % uv
        uw = { 0, 'V' };                        % uw
        psi_s_u = { 0, 'V*s' };                 % psi_s_u
        psi_s_v = { 0, 'V*s' };                 % psi_s_v
        psi_s_w = { 0, 'V*s' };                 % psi_s_w
        psi_r_u = { 0, 'V*s' };                 % psi_r_u
        psi_r_v = { 0, 'V*s' };                 % psi_r_v
        psi_r_w = { 0, 'V*s' };                 % psi_r_w
        tau_m = { 0, 'N*m' };                   % Torque m
        tau_e = { 0, 'N*m' };                   % Torque e
        theta_r = { 0, 'rad' };                 % Rotor position
    end

    branches
        isu : uu_p.i -> uu_n.i;
        isv : uv_p.i -> uv_n.i;
        isw : uw_p.i -> uw_n.i;
        tau_m : S.t ->*; 
    end

    equations
        let

        in
            uu == uu_p.v - uu_n.v;
            uv == uv_p.v - uv_n.v;
            uw == uw_p.v - uw_n.v;

            omega_r == cp*S.w

            uu == Rs*isu + psi_s_u.der;
            uv == Rs*isv + psi_s_v.der;
            uw == Rs*isw + psi_s_w.der;
        
            0 == Rr*iru + psi_r_u.der;
            0 == Rr*irv + psi_r_v.der;
            0 == Rr*irw + psi_r_w.der;

            psi_s_u == Ls*isu - 0.5*Lm*isv - 0.5*Lm*isw + ...
                    Lm*(iru*cos(theta_r) + irv*cos(theta_r+2*pi/3) + irw*cos(theta_r-2*pi/3));
            psi_s_v == -0.5*Lm*isu + Ls*isv - 0.5*Lm*isw + ...
                    Lm*(iru*cos(theta_r-2*pi/3) + irv*cos(theta_r) + irw*cos(theta_r+2*pi/3));
            psi_s_w == -0.5*Lm*isu - 0.5*Lm*isv + Ls*isw + ...
                    Lm*(iru*cos(theta_r+2*pi/3) + irv*cos(theta_r-2*pi/3) + irw*cos(theta_r));

            psi_r_u == Lr*iru - 0.5*Lm*irv - 0.5*Lm*irw + ...
                    Lm*(isu*cos(theta_r) + isv*cos(theta_r-2*pi/3) + isw*cos(theta_r+2*pi/3));
            psi_r_v == -0.5*Lm*iru + Lr*irv - 0.5*Lm*irw + ...
                    Lm*(isu*cos(theta_r+2*pi/3) + isv*cos(theta_r) + isw*cos(theta_r-2*pi/3));
            psi_r_w == -0.5*Lm*iru - 0.5*Lm*irv + Lr*irw + ...
                    Lm*(isu*cos(theta_r-2*pi/3) + isv*cos(theta_r+2*pi/3) + isw*cos(theta_r));

            tau_e == -cp*Lm*((isu*(iru-0.5*irv-0.5*irw)+isv*(irv-0.5*iru-0.5*irw)+...
                isw*(irw-0.5*irv-0.5*iru))*sin(theta_r) + ...
                sqrt(3)/2*(isu*(irv-irw) + isv*(irw-iru) + isw*(iru-irv))*cos(theta_r));
            
            Jm/cp * omega_r.der == tau_e + tau_m - bm*omega_r;
            theta_r.der == omega_r; 
            
            isu_out == isu;
            isv_out == isv;
            isw_out == isw;
            psi_s_u_out == psi_s_u;
            psi_s_v_out == psi_s_v;
            psi_s_w_out == psi_s_w;
            psi_r_u_out == psi_r_u;
            psi_r_v_out == psi_r_v;
            psi_r_w_out == psi_r_w;
            tau_e_out == tau_e;
            theta_r_out == mod(theta_r+3*pi,2*pi) - pi;
        end
    end
end
